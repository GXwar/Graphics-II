!function(e){var t={};function r(a){if(t[a])return t[a].exports;var o=t[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,a){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(r.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(a,o,function(t){return e[t]}.bind(null,o));return a},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);const a=(e,t)=>{if(e.length===t.length)return e.map((e,r)=>e+t[r]);console.log("Invalid vector addition")},o=(e,t)=>{if(e.length===t.length)return e.map((e,r)=>e-t[r]);console.log("Invalid vector substraction")},n=(e,t)=>e.map(e=>e*t),l=e=>n(e,1/(e=>Math.sqrt(e.reduce((e,t)=>e+t*t,0)))(e)),c=(e,t)=>[e[1]*t[2]-t[1]*e[2],-(e[0]*t[2]-t[0]*e[2]),e[0]*t[1]-t[0]*e[1]],s={h:1,d:1,f:1e3,C:[0,20,20],pRef:[0,0,0],UP:[0,-1,0],N:[0,0,0],U:[0,0,0],V:[0,0,0]},f=()=>{s.N=l(o(s.pRef,s.C)),s.U=l(c(s.N,s.UP)),s.V=c(s.U,s.N)};var i=s;var u={pointsNum:32,facesNum:40,points:[[-5.53777e-8,1,2.87212e-8],[.705667,.712466,2.87212e-8],[1,-909919e-9,2.87212e-8],[.71298,-.707007,2.87212e-8],[-5.53777e-8,-1,2.87212e-8],[.570897,.712466,.436126],[.809017,-909919e-9,.618034],[.576813,-.707007,.440646],[.218063,.712466,.705667],[.309017,-909919e-9,1],[.220323,-.707007,.71298],[-.218063,.712466,.705667],[-.309017,-909919e-9,1],[-.220323,-.707007,.71298],[-.570897,.712466,.436126],[-.809017,-909919e-9,.618034],[-.576813,-.707007,.440646],[-.705668,.712466,-3.6145e-8],[-1,-909919e-9,-6.32006e-8],[-.71298,-.707007,-3.68172e-8],[-.570897,.712466,-.436126],[-.809017,-909919e-9,-.618034],[-.576813,-.707007,-.440646],[-.218063,.712466,-.705667],[-.309017,-909919e-9,-1],[-.220323,-.707007,-.71298],[.218064,.712466,-.705667],[.309018,-909919e-9,-1],[.220323,-.707007,-.71298],[.570897,.712466,-.436126],[.809018,-909919e-9,-.618033],[.576813,-.707007,-.440645]],faces:[[0,1,5],[1,2,6,5],[2,3,7,6],[3,4,7],[0,5,8],[5,6,9,8],[6,7,10,9],[7,4,10],[0,8,11],[8,9,12,11],[9,10,13,12],[10,4,13],[0,11,14],[11,12,15,14],[12,13,16,15],[13,4,16],[0,14,17],[14,15,18,17],[15,16,19,18],[16,4,19],[0,17,20],[17,18,21,20],[18,19,22,21],[19,4,22],[0,20,23],[20,21,24,23],[21,22,25,24],[22,4,25],[0,23,26],[23,24,27,26],[24,25,28,27],[25,4,28],[0,26,29],[26,27,30,29],[27,28,31,30],[28,4,31],[0,29,1],[29,30,2,1],[30,31,3,2],[31,4,3]]};const h=e=>new Promise((t,r)=>{let a=new XMLHttpRequest;a.open("GET",e,!0),a.onreadystatechange=function(){4===this.readyState&&(200===this.status?t(this.responseText):r())},a.send()});var d=(e,t)=>{h(e).then(e=>{(e=>{let t=e.match(/[^\r\n]+/g),[r,a,o]=t[0].trim().split(/\s+/);null==o&&(o=a,a=r),u.pointsNum=parseInt(a,10),u.facesNum=parseInt(o,10),u.points=[],u.faces=[];for(let e=1;e<=u.pointsNum;e++){let[r,a,o]=t[e].trim().split(/\s+/);u.points.push([parseFloat(r),parseFloat(a),parseFloat(o)])}for(let e=u.pointsNum+1;e<=u.pointsNum+u.facesNum;e++){let[r,...a]=t[e].trim().split(/\s+/);a.length>2&&u.faces.push(a.map(e=>parseInt(e)-1))}})(e),t()}).catch(()=>{console.log("Load or parse file error")})};var p={backFaceSet:new Set,calcPoints:[],width:0,height:0,pixelBuffer:[],zBuffer:[],face_color_r_buffer:[],face_color_g_buffer:[],face_color_b_buffer:[],edgeTable:[],activeEdgeTable:[]};const g=(e,t)=>{if(e[0].length!==t.length)return console.log("Cannot multiply these two matrices!"),null;const[r,a,o]=[e.length,t.length,t[0].length],n=[];for(let e=0;e<r;e++)n.push(Array.from({length:o},e=>0));for(let l=0;l<r;l++)for(let r=0;r<o;r++)for(let o=0;o<a;o++)n[l][r]+=e[l][o]*t[o][r];return n},b=e=>{const t=g((()=>{const e=i.f/(i.f-i.d),t=i.d/i.h;return[[t,0,0,0],[0,t,0,0],[0,0,e,-e*i.d],[0,0,1,0]]})(),(()=>{const e=[[1,0,0,-i.C[0]],[0,1,0,-i.C[1]],[0,0,1,-i.C[2]],[0,0,0,1]],t=[[i.U[0],i.U[1],i.U[2],0],[i.V[0],i.V[1],i.V[2],0],[i.N[0],i.N[1],i.N[2],0],[0,0,0,1]];return g(t,e)})());return e.points.map(e=>{return(e=>{let t=Array.from(e),r=t.pop();return t.map(e=>e/r)})(((e,t)=>{let[r,a]=[e.length,t.length];const o=Array.from({length:r},e=>0);for(let n=0;n<r;n++)for(let r=0;r<a;r++)o[n]+=e[n][r]*t[r];return o})(t,(e=>[...e,1])(e)))})};class m{constructor(e,t,r,a,o,n){this.yStart=e,this.yMax=t,this.xStart=r,this.delta=a,this.zUpper=o,this.zLower=n}}const y=()=>Math.floor(256*Math.random()),v=(e,t=!1)=>Math.floor((e+1)*p.height/2)-(t?1:0),x=()=>{for(let e=0;e<p.height;e++){p.pixelBuffer[e]=[],p.zBuffer[e]=[];for(let t=0;t<p.width;t++)p.pixelBuffer[e][t]=[0,0,0],p.zBuffer[e][t]=1}},S=(e,t)=>{if(v(e[1])===v(t[1])||e[1]>1||e[1]<-1)return;e[1]>t[1]&&([e,t]=[t,e]);const r=new m(v(e[1]),v(t[1],!0),(e=>(e+1)*p.height/2)(e[0]),(e[0]-t[0])/(e[1]-t[1]),t[2],e[2]);r.yStart>r.yMax&&(r.yMax=r.yStart),p.edgeTable[Math.floor(r.yStart)].push(r)},_=(e,t)=>e.yMax===e.yStart?e.zUpper:e.zUpper-(e.zUpper-e.zLower)*(e.yMax-t)/(e.yMax-e.yStart);var C=()=>{x(),u.faces.forEach((e,t)=>{if(p.backFaceSet.has(t))return;(()=>{for(let e=0;e<p.height;e++)p.edgeTable[e]=[]})();for(let t=0;t<e.length;t++){let r=p.calcPoints[e[t]],a=p.calcPoints[e[(t+1)%e.length]];S(r,a)}let r=0;for(let e=0;e<p.height;e++)if(p.edgeTable[e].length>0){r=e;break}for(let e=r;e<p.height;e++){for(let t=0;t<p.edgeTable[e].length;t++)p.activeEdgeTable.push(p.edgeTable[e][t]);p.activeEdgeTable.sort((e,t)=>e.xStart-t.xStart);for(let r=0;r+1<p.activeEdgeTable.length;r+=2){const[a,o]=[p.activeEdgeTable[r],p.activeEdgeTable[r+1]];if(a.xStart>o.xStart)continue;const[n,l]=[_(a,e),_(o,e)];for(let r=Math.max(0,Math.floor(a.xStart));r<Math.floor(o.xStart)&&r<p.width;r++){let c=r==Math.max(0,a.xStart)?n:l-(l-n)*(o.xStart-r)/(o.xStart-a.xStart);c>p.zBuffer[e][r]||(p.zBuffer[e][r]=c,p.pixelBuffer[e][r]=[p.face_color_r_buffer[t],p.face_color_g_buffer[t],p.face_color_b_buffer[t]])}}p.activeEdgeTable=p.activeEdgeTable.filter(t=>t.yMax!==e).map(e=>(e.xStart+=e.delta,e))}})};var M=(e,t,r)=>()=>{p.backFaceSet=new Set,u.faces.forEach((e,t)=>{((e,t)=>e[0]*t[0]+e[1]*t[1]+e[2]*t[2])(c(o(u.points[e[0]],u.points[e[1]]),o(u.points[e[1]],u.points[e[2]])),o(i.C,u.points[e[0]]))>=0&&p.backFaceSet.add(t)}),p.calcPoints=b(u),(()=>{x();for(let e=0;e<u.facesNum;e++)p.face_color_r_buffer.push(y()),p.face_color_g_buffer.push(y()),p.face_color_b_buffer.push(y())})(),C(),e.clearRect(0,0,t,r);const a=e.createImageData(t,r),n=new Uint8Array(t*r*4);for(let e=0;e<p.height;e++)for(let t=0;t<p.width;t++){const r=e*p.width+t;n[4*r+0]=p.pixelBuffer[e][t][0],n[4*r+1]=p.pixelBuffer[e][t][1],n[4*r+2]=p.pixelBuffer[e][t][2],n[4*r+3]=255}a.data.set(n),e.putImageData(a,0,0)};const w=["atc","ball","cow","knight"],T=(e,t)=>{const r=document.querySelector(`#${e}`),a=document.querySelector(`#${e}_V`);r.value=i[e],a.innerHTML=i[e],r.addEventListener("change",function(){i[e]=this.value,a.innerHTML=this.value,i.pRef[0]-=10,t()})},k=document.querySelector("#content"),[E,N]=[k.height,k.width],U=k.getContext("2d");U.fillRect(0,0,N,E),U.strokeStyle="green";const P=M(U,N,E),B=document.querySelector("select.choose_model");var z;z=B,w.forEach(e=>{const t=document.createElement("option");t.setAttribute("value",e),t.appendChild(document.createTextNode(e)),z.appendChild(t)}),["h","d","f"].forEach(e=>T(e,P));const L=document.querySelector(".render");var q,j;L.addEventListener("click",()=>{const e=B.selectedIndex;0===e&&alert("Please select a model to render");const t=B.options[e].value;d(`./public/model/${t}.d.txt`,P),L.disabled=!0}),document.querySelector(".reset").addEventListener("click",()=>{location.reload()}),q="content",j=P,document.querySelector(`#${q}`).addEventListener("mousewheel",function(e){e.wheelDelta>0?i.C=n(i.C,1.2):i.C=n(i.C,5/6),j()}),document.addEventListener("keypress",function(e){switch(e.key){case"w":i.C=a(i.C,n(i.V,-1)),j();break;case"s":i.C=a(i.C,n(i.V,1)),j();break;case"a":i.C=a(i.C,n(i.U,1)),j();break;case"d":i.C=a(i.C,n(i.U,-1)),j();break;case"i":i.C[1]-=2,f(),j();break;case"k":i.C[1]+=2,f(),j();break;case"j":i.C[0]+=2,f(),j();break;case"l":i.C[0]-=2,f(),j()}}),f(),p.width=N,p.height=E}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,